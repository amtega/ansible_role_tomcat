#!/bin/bash

# Define jstat-command
jstat="{{ tomcat_java_home }}/bin/jstat"

# Warning/Critical levels
ws={{ tomcat_check_mk_warning_level }}
cs={{ tomcat_check_mk_critical_level }}

# Get proceses
ps_info=$(mktemp)
ps -ef | grep java | grep "catalina.base={{ tomcat_base }}" | grep -v grep > $ps_info

while read line; do
  pid=`echo $line | awk '{ print $2 }'`
  label="{{ tomcat_check_mk_label }}"

  if [ ! -d /proc/$pid ] ; then
    echo "2 $label - process pid[$pid] not found"
    continue
  fi

  # Get GC info. Ignore failure if jsvc is used because in this case the first
  # process is not a java process
  gc=$(su {{ tomcat_user }} -s /bin/bash -c "$jstat -gc $pid 2>/dev/null | tail -1 | sed -e 's/[ ][ ]*/ /g'")
  if [ -z "$gc" ]; then
    if [ -z "`echo $line | grep jsvc.exec`" ]; then
      echo "2 $label ERROR Can't get GC statistics"
    fi
  else
    # Extract GC info
    set -- $gc
    s0u=$(expr "${2}" : '\([0-9]\+\)')
    s1u=$(expr "${4}" : '\([0-9]\+\)')
    eu=$(expr "${6}" : '\([0-9]\+\)')
    ou=$(expr "${8}" : '\([0-9]\+\)')
    heap=$(($eu + $ou + $s0u + $s1u))
    pu_mu=$(expr "${10}" : '\([0-9]\+\)')

    # Get GC capacity. Again ignore failure if jsvc is used
    gccapacity=$(su {{ tomcat_user }} -s /bin/bash -c "$jstat -gccapacity $pid 2>/dev/null | tail -1 | sed -e 's/[ ][ ]*/ /g'")
    if [ -z "$gccapacity" -a -n "`echo $line | grep jsvc.exec`" ]; then
      if [ -z "`echo $line | grep jsvc.exec`" ]; then
        echo "2 $label ERROR Can't get GC capacity"
      fi
    else
      # Extract GC capcity info
      set -- $gccapacity

      ngcmx=$(expr "${2}" : '\([0-9]\+\)')
      s0c=$(expr "${4}" : '\([0-9]\+\)')
      s1c=$(expr "${5}" : '\([0-9]\+\)')
      ogcmx=$(expr "${8}" : '\([0-9]\+\)')
      heapmx=$(($ngcmx + $ogcmx + $s0c + $s1c))
      pgcmx_mcmx=$(expr "${12}" : '\([0-9]\+\)')

      # Compute ratios
      heap_ratio=$((($heap * 100) / $heapmx))
      perm_meta_ratio=$((($pu_mu * 100) / $pgcmx_mcmx))

      # Render performance data
      perfdata="heap=$[$heap/1024]|heap_ratio=$heap_ratio|perm_meta=$[$pu_mu/1024]|perm_meta_ratio=$perm_meta_ratio"

      # Show alerts
      if [ $cs -gt 0 -a $perm_meta_ratio -ge $cs ]; then
        echo "2 $label $perfdata Process $pid CRITICAL PermGen/Metaspace (${perm_meta_ratio}% of MaxPermSize/MaxMetaspaceSize)"
      fi
      if [ $cs -gt 0 -a $heap_ratio -ge $cs ]; then
        echo "2 $label $perfdata Process $pid CRITICAL Heap (${heap_ratio}% of MaxHeapSize)"
      fi

      if [ $ws -gt 0 -a $perm_meta_ratio -ge $ws ]; then
        echo "1 $label $perfdata Process $pid WARNING PermGen/Metaspace (${perm_meta_ratio}% of MaxPermSize/MaxMetaspaceSize)"
      fi
      if [ $ws -gt 0 -a $heap_ratio -ge $ws ]; then
        echo "1 $label $perfdata Process $pid WARNING Heap (${heap_ratio}% of MaxHeapSize)"
      fi
      echo "0 $label $perfdata Process $pid alive"
    fi
  fi
done < $ps_info

rm -f $ps_info
