---
# Role install tasks

- block:
    - block:
        - name: install required operating system packages
          package:
            name: "{{ item }}"
            state: present
          loop: >-
            {{ tomcat_packages[distribution] | default([]) }}

        - name: install required python packages
          pip:
            name: "{{ item }}"
            state: "latest"
          loop: >-
            {{ tomcat_packages_python[distribution] | default([]) }}
          environment: "{{ tomcat_http_proxy_environment }}"
      vars:
        distribution: >-
          {{ ansible_facts.distribution
             | lower
             + "_" + ansible_facts.distribution_major_version }}

    - name: setup instances groups
      group:
        name: "{{ item.group | default(tomcat_instance_group) }}"
      loop: "{{ tomcat_instances }}"
      loop_control:
        label: "{{ item.name }}"

    - name: setup instances users
      user:
        name: "{{ instance.user | default(tomcat_instance_user) }}"
        group: "{{ instance.group | default(tomcat_instance_group) }}"
        home: /
      loop: "{{ tomcat_instances }}"
      loop_control:
        label: "{{ item.name }}"

    - block:
        - block:
            - name: download instances tomcat tarball
              get_url:
                url: "{{ download_url }}"
                dest: >-
                  {{ instance.download_path
                     | default(tomcat_instance_download_path) }}
              environment: "{{ tomcat_http_proxy_environment }}"
              register: tomcat_download_tarball_result
              loop: "{{ tomcat_instances }}"
              loop_control:
                label: "{{ item.name }}"

            - name: create tomcat instances home dirs
              file:
                path: "{{ instance_home }}"
                state: directory
                owner: "{{ instance.user | default(tomcat_instance_user) }}"
                group: "{{ instance.group | default(tomcat_instance_group) }}"
                mode: "{{ tomcat_files_permissions }}"
              loop: "{{ tomcat_instances }}"
              loop_control:
                label: "{{ item.name }}"

            - name: extract instances tomcat tarball
              unarchive:
                src: "{{ downloaded_tarball }}"
                dest: "{{ instance_home }}"
                copy: no
                owner: "{{ instance.user | default(tomcat_instance_user) }}"
                group: "{{ instance.group | default(tomcat_instance_group) }}"
                mode: "{{ tomcat_files_permissions }}"
                extra_opts:
                  - "--strip-components=1"
              register: tomcat_extract_tarball_result
              loop: "{{ tomcat_instances }}"
              loop_control:
                label: "{{ item.name }}"

            - name: create tomcat instances home symlinks
              file:
                src: "{{ instance_home }}"
                dest: "{{ instance.link }}"
                state: link
                mode: "{{ tomcat_files_permissions }}"
              loop: >-
                {{ tomcat_instances | selectattr('link', 'defined') | list }}
              loop_control:
                label: "{{ item.name }}"
          when: >-
            ansible_local[instance.name] is undefined
            or instance.version
               is not version(ansible_local[instance.name].version, "==")

        - name: delete tomcat instances downloaded tarballs
          file:
            path: "{{ downloaded_tarball }}"
            state: absent
          loop: >-
            {{ tomcat_instances
               | selectattr("remove_download", "defined")
               | selectattr("remove_download", "equalto", true)
               | list
               + (tomcat_instance_remove_download)
                 | ternary(tomcat_instances
                           | selectattr("remove_download", "undefined")
                           | list,
                           []) }}
          loop_control:
            label: "{{ item.name }}"
      vars:
        version_major: >-
          {{ instance.version
             | regex_replace("([0-9]+)\.([0-9]+)\.([0-9]+)", "\1") }}
        dist_url: >-
          {{ instance.download_mirror
             | default(tomcat_instance_download_mirror)
             ~ "/dist/tomcat"
             ~ "/tomcat-"
             ~ version_major
             ~ "/v"
             ~ instance.version
             ~ "/bin" }}
        dist_tarball: >-
          {{ "apache-tomcat-"
             ~ instance.version
             ~ ".tar.gz" }}
        download_url: >-
          {{ (instance.download_url is defined)
             | ternary(instance.download_url, dist_url)
               + "/"
               + dist_tarball }}
        downloaded_tarball: >-
          {{ instance.download_path
             | default(tomcat_instance_download_path)
             + "/"
             + dist_tarball }}

    - block:
        - name: create instances directory tree
          file:
            path: "{{ instance_base }}/{{ item.1 }}"
            state: directory
            owner: "{{ item.0.user | default(tomcat_instance_user) }}"
            group: "{{ item.0.group | default(tomcat_instance_group) }}"
            mode: "{{ tomcat_files_permissions }}"
          register: tomcat_create_instances_tree_result
          loop: "{{ query('nested', tomcat_instances, subdirs) }}"
          loop_control:
            label: "{{ item.0.name }} {{ item.1 }}"
          vars:
            subdirs:
              - bin
              - conf
              - lib
              - logs
              - temp
              - webapps
              - work

        - name: prepare instances directories
          synchronize:
            src: "{{ instance_home }}/{{ item.1.src }}"
            dest: "{{ instance_base }}/{{ item.1.dest }}"
            archive: true
          loop: "{{ query('nested', tomcat_instances, subdirs) }}"
          loop_control:
            label: "{{ item.0.name }} {{ item.1.src }}"
          vars:
            subdirs:
              - src: conf/
                dest: conf
              - src: bin/catalina.sh
                dest: bin/catalina.sh
              - src: bin/startup.sh
                dest: bin/startup.sh
              - src: bin/shutdown.sh
                dest: bin/shutdown.sh
          delegate_to: "{{ inventory_hostname }}"
          when: >-
            tomcat_extract_tarball_result.results
            | selectattr("item.name", "equalto", item.0.name)
            | first
            is changed
            or tomcat_download_tarball_result.results
            | selectattr("item.name", "equalto", item.0.name)
            | first
            is changed
            or tomcat_create_instances_tree_result.results
            | selectattr("item.0.name", "equalto", item.0.name)
            | select("changed")
            | list
            | length > 0

    - name: create custom facts directory
      file:
        path: /etc/ansible/facts.d
        state: "directory"

  vars:
    instance: >-
      {{ (item.0 is defined) | ternary(item.0, item) }}

    instance_home: >-
      {{ instance.home
         | default(tomcat_instance_home
                   + "/apache-tomcat-"
                   + instance.version) }}
    instance_base: >-
      {{ instance.base
         | default(tomcat_instance_base
                   + "/"
                   + instance.name) }}
  tags:
    - role::tomcat
    - role::tomcat::install
